<section
  id="results"
  class="w-full max-w-4xl grid gap-4 grid-cols-[repeat(auto-fit,_minmax(140px,1fr))] sm:grid-cols-[repeat(auto-fit,_minmax(220px,1fr))]"
>
</section>
<script>
  import { assets, spinner, share } from '../utils/constants'

  const $ = (el: string) => document.querySelector(el);
  const $$ = (el: string) => document.querySelectorAll(el);
  const submit = $("button[type=submit] span")!;

  const form = $("form")!;
  form.addEventListener("submit", (e) => {
    e.preventDefault();

    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    const url = formData.get("url") as string;

    if (!url.trim()) {
      alert("Please enter a valid Spotify URL");
      return;
    }

    let trackId = "";
    try {
      trackId = new URL(url).pathname.split("/").pop() as string;
    } catch {
      if (url.length === 22) {
        trackId = url;
      } else {
        alert(`${url} is not a valid Spotify URL`);
        return;
      }
    }
    // add schema validation

    submit.innerHTML = `${spinner} Loading...`;

    fetch(`/api/search?track=${trackId}`)
      .then((res) => res.json())
      .then((info) => {
        const { data, artist } = info;
        addTrackQuery(artist);
        addHtmlNodes(data, artist);
      })
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        submit.innerHTML = "Get Alternatives";
      });

    function addTrackQuery(query: string) {
      const queryHeading = $("#query");
      const results = $("#results")!;

      results.classList.add("py-20");
      queryHeading?.remove();

      const heading = document.createElement("h2");
      heading.classList.add("animate-fade-in-up", "mt-6", "text-sm", "opacity-70", "text-center", "flex", "items-center");
      heading.id = "query";
      heading.innerHTML = `Results for "${query}"`;
      results.insertAdjacentElement("beforebegin", heading);

      const shareIcon = document.createElement("button");
      shareIcon.id = "share-playlist";
      shareIcon.classList.add("bg-pink-500", "rounded-full", "p-1.5", "text-white", "cursor-pointer", "transition-transform", "hover:-translate-y-1", "ml-2.5");
      shareIcon.innerHTML = share;
      heading.appendChild(shareIcon);
    }

    function addHtmlNodes(data: { [key: string]: string }[], artist: string) {
      const hero = $("#hero");
      const results = $("#results")!;

      hero?.remove();

      results.innerHTML = data
        .map((source) => {
          const [company, url] = Object.entries(source)[0];
          const asset = assets[company as keyof typeof assets];
          return `\
					<article class="relative animate-fade-in-up flex sm:transition-transform sm:hover:-translate-y-3">
						<a
							href=${url}
							target="_blank"
							rel="noopener noreferrer"
							class="flex flex-col items-center justify-center size-full border border-neutral-400/50 rounded-3xl p-6 bg-white/45"
						>
							${asset ? (company !== "deezer" ? `<img src=${asset} alt=${company} class="w-full block ${company === 'amazon' ? 'rounded-[30px]' : ''}" />` : `<img src=${asset} alt=${company} class="w-full block" />`.repeat(3)) : `<h3 class="uppercase text-xl md:text-3xl font-semibold">${company}</h3>`}
						</a>
            <button id="clipboard" data-clipboard-text=${url} class="hidden sm:flex z-10 absolute top-0 right-0 p-2 transition-opacity hover:opacity-80 text-pink-400 cursor-pointer">
              <svg class="w-4 h-4 pointer-events-none" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/></svg>
            </button>
					</article>
				`;
        })
        .join("");

      if (data.length > 0) {
        const params = new URLSearchParams();
        data.forEach(source => {
          const [key, value] = Object.entries(source)[0];
          params.append(key, value as string);
        });

        const encodedArtist = encodeURIComponent(artist);
        const encodedParams = encodeURIComponent(params.toString());

        const url = `${window.origin}/share/${encodedArtist}?results=${encodedParams}`;

        const sharePlaylist = $("#share-playlist")!;
        sharePlaylist.addEventListener("click", () => {
          navigator.clipboard.writeText(url);
        });

        const clipboard = $$("#clipboard")!;
        clipboard.forEach((button) => {
          button.addEventListener("click", (e) => {
            const target = e.target as HTMLButtonElement;
            const url = target.getAttribute("data-clipboard-text");
            navigator.clipboard.writeText(url!);
          });
        });
      } else {
        $("#share-playlist")?.remove();
      }
    }
  });
</script>
