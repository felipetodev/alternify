---
import Layout from "@/layouts/Layout.astro";
import Socials from "@/components/Socials.astro";
import { assets } from "@/lib/constants";
import { db, eq, Share } from "astro:db";
import {
  validateShareRequest,
  validateTrackId
} from "@/lib/schemas";
import type { Service } from "@/lib/types";

// let isDB = false;
let urlParams: URLSearchParams = new URLSearchParams();
const { id } = Astro.params;

const track = validateTrackId(id)
if (!track.success) return Astro.rewrite("/404")

try {
  const trackInfo = (await db
    .select()
    .from(Share)
    .where(eq(Share.id, id!)))[0] ?? null;

  if (trackInfo !== null) {
    // isDB = true;
    urlParams = new URLSearchParams(trackInfo.url);
  } else {
    console.error(`[Error]: Track id: ${id} not found in database`);
    return Astro.rewrite("/404")
  }
} catch {
  console.error('[Error]: DB failed to fetch track info');
  return Astro.rewrite("/404")
}

const result = validateShareRequest(id!, urlParams);
if (!result.success) {
  return Astro.rewrite("/404")
}

const { artist, results, image } = result.data;

const links = results.split("&").map((result) => {
  const [service, url] = result.split("=") as [Service, string]
   return { service, url: decodeURIComponent(url) }
 })

const shareHref = `${Astro.url.origin}/share/${id}`
---
<Layout
  title={`${artist} | Alternify`}
  description={`Found "${artist}" alternative tracks`}
  image={image}
>
  <div class="flex flex-col text-center gap-4 mb-8 mt-10">
    <a href="/" class="hover:opacity-80 transition-opacity">
      <h1 class="text-4xl font-medium">Alternify - Share ðŸŽµ</h1>
    </a>
  </div>
  <h2 class="animate-fade-in-up mt-6 text-sm opacity-70 text-center flex items-center">
    Results for "<span class="font-semibold">{artist}</span>"
  </h2>
  <Socials
    title={artist!}
    href={shareHref}
  />
  <section
    id="results"
    class="w-full max-w-4xl grid gap-6 grid-cols-[repeat(auto-fit,_minmax(140px,1fr))] sm:grid-cols-[repeat(auto-fit,_minmax(220px,1fr))] mt-20"
  >
    {
      links.map(({ service, url }) => {
        const asset = assets[service];
        return (
          <article class="relative aspect-square animate-fade-in-up flex sm:transition-transform sm:hover:-translate-y-3">
            <a
              href={url}
              target="_blank"
              rel="noopener noreferrer"
              class="flex flex-col items-center justify-center size-full border border-neutral-400/50 rounded-3xl p-6 bg-white/45"
            >
              {asset ? (
                service !== "deezer" ? (
                  <img
                    src={asset}
                    alt={service}
                    class={[
                      "w-full block",
                      (service === "amazon" || service === "genius") ? "rounded-[30px]" : ""
                    ].join(" ")}
                  />
                ) : (
                  <img src={asset} alt={service} class="w-full block" />
                  <img src={asset} alt={service} class="w-full block" />
                  <img src={asset} alt={service} class="w-full block" />
                )
              ) : (
                <h3 class="uppercase text-xl md:text-3xl font-semibold">
                  {service}
                </h3>
              )}
            </a>
          </article>
        );
      })
    }
  </section>
</Layout>
